#define GLUT_DISABLE_ATEXIT_HACK
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
//#include <GL/GLee.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctime>
#include <malloc.h>
#include <math.h>
#include <GL/freeglut.h>
#include "Targa.h"
#include <cstdio>
#include <cstdlib>
#include <iostream>

using namespace std;

GLfloat zanx=0;
GLfloat zany=0;
GLfloat zanz=0;
// kolor mg³y = kolor t³a
GLfloat kolor_mgly [4] = {0.25f, 0.25f, 0.25f, 1.0f};

// gêstoœæ mg³y w trybie narastanie EXP i EXP2
GLfloat d = 0.1f;
GLbyte  enablemgla = false;
GLbyte  EnableLight = true;
GLbyte  motionblur = false;
GLbyte  punkts = false;
GLbyte  siatka = false;
GLuint listid;
GLint zskrz=0;
GLuint mgla=0;

int screenWidth = 1200;
int screenHeight = 600;

int kolo=1;

GLdouble cameraPos[] = {0.0, 0.0, 30.0};

int i=0;

GLfloat xRotated, yRotated, zRotated=0;

GLuint tex[7];
//z +- 5 granica
//x +- 5 granica
//y +- 5 granica


GLfloat B[3][3] = {
                    {0,0,0},   // V1
                    {0,0,0},   // V2
                    {0,0,0}
                  }; // V3


GLfloat C[3][3] = {
                    {0,0,0},   // V1
                    {0,0,0},   // V2
                    {0,0,0}
                  }; // V3

GLfloat D[3][3] = {
                    {0, 0, 0},   // V1
                    {0, 0, 0},   // V2
                    {0, 0, 0}
                  }; // V3

GLfloat E[3][3] = {
                    {0, 0, 0},   // V1
                    {0, 0, 0},   // V2
                    {0, 0, 0}
                  }; // V3

GLfloat F[3][3] = {
                    {0, 0, 0},   // V1
                    {0, 0, 0},   // V2
                    {0, 0, 0}
                  }; // V3

GLfloat G[3][3] = {
                    {0, 0, 0},   // V1
                    {0, 0, 0},   // V2
                    {0, 0, 0}
                  }; // V3

bool k1 = true;
bool k2 = true;
bool k3 = true;
bool k4 = true;
bool k5 = true;
bool k6 = true;

bool anti_efekt = false;

float k=0.006f;

enum
{
    /* obiekty              */
    SPHERE,               // kula
    EXIT                  // wyjœcie
};

int obiekt = SPHERE;

/* Funkcja ustawia parametry renderowania i oœwietlenie */
void texturing() {
	//glEnable(GL_DEPTH_TEST);    /* W³¹czenie Z-Bufora */
	//glEnable(GL_TEXTURE_2D);    /* W³¹czenie teksturowania */
    /* Wygenerowanie trzech tzw. "obiektów" dla tekstur */
	glGenTextures(7, tex);
    /* Aktywacja ka¿dej tekstury po kolei i ³adowanie z plików TGA */
	glBindTexture(GL_TEXTURE_2D, tex[0]);
	LoadTGATexture("trawa.tga");
	glBindTexture(GL_TEXTURE_2D, tex[1]);
	LoadTGATexture("wing.tga");
	glBindTexture(GL_TEXTURE_2D, tex[2]);
	LoadTGATexture("czarny.tga");
	glBindTexture(GL_TEXTURE_2D, tex[3]);
	LoadTGATexture("zolty.tga");
	glBindTexture(GL_TEXTURE_2D, tex[4]);
	LoadTGATexture("red.tga");
	glBindTexture(GL_TEXTURE_2D, tex[5]);
	LoadTGATexture("pink.tga");
}

void initLight()
{
    GLfloat lightAmb[] = {0.3, 0.3, 0.3, 1.0};
GLfloat lightDif[] = {0.7, 0.7, 0.7, 1.0};
GLfloat lightPos[] = {0, 0, 0, 1.0};
GLfloat lightSpec[] = {1, 1, 1, 1};

glEnable(GL_NORMALIZE);
    glEnable(GL_LIGHTING);
	glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_AUTO_NORMAL);
    glEnable(GL_NORMALIZE);
    glEnable(GL_LIGHT0);

	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lightAmb);
   glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmb);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDif);
	glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
	glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpec);

	glMaterialfv(GL_FRONT, GL_SPECULAR, lightSpec);
	glMateriali(GL_FRONT, GL_SHININESS, 100);

	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);

}

void rozwalswiatlo()
{
    glDisable(GL_NORMALIZE);
            glDisable(GL_LIGHTING);
            glDisable(GL_COLOR_MATERIAL);
            glDisable(GL_AUTO_NORMAL);
            glDisable(GL_NORMALIZE);
            glDisable(GL_LIGHT0);
}

void mucha()
{
    GLUquadricObj *obiekt;
    obiekt = gluNewQuadric();

   glPushMatrix(); //cala mucha
   glBindTexture(GL_TEXTURE_2D, tex[2]);
  glScalef(0.5,0.5,0.5);
  // glScalef(4,4,4);
   glPushMatrix(); //nasza mucha tyl
   //  glColor3f(0,0,0);
     glScalef(1, 1, 1);
     glScalef(2, 0.5, 1);
      glTranslatef(0.3,0.3, 0);
      gluSphere(obiekt, 0.2, 20, 10);
 //  glutSolidSphere(0.2,20,10);
 glPopMatrix();

 glPushMatrix(); //nasza mucha tulow
   //  glColor3f(0,0,0);
   //  glScalef(1, 1, 1);
     glScalef(1, 0.5, 0.7);
      glTranslatef(1,0.3, 0);
   gluSphere(obiekt,0.1,20,10);
 glPopMatrix();
  glPopMatrix();
}

void skrzydlap()
{
     GLUquadricObj *obiekt;
    obiekt = gluNewQuadric();


    glPushMatrix(); //skrzydlo przednie
    //glScalef(4,4,4);
       glScalef(0.5,0.5,0.5);
    glBindTexture(GL_TEXTURE_2D, tex[1]);
  //  glColor3f(1,1,1);
      glTranslatef(0.6,0.2, 0.2);
     glRotatef(90,1,0,0);
     glRotatef(-35,0,0,1);
     glScalef(2, 1, 0);
   gluSphere(obiekt,0.2,20,10);
 glPopMatrix();
}
void skrzydlat()
{
     GLUquadricObj *obiekt;
    obiekt = gluNewQuadric();


 glPushMatrix(); //skrzydlo przednie
 //glScalef(4,4,4);
 glScalef(0.5,0.5,0.5);
  //   glColor3f(1,1,1);
  glBindTexture(GL_TEXTURE_2D, tex[1]);
      glTranslatef(0.6,0.2, -0.2);
     glRotatef(90,1,0,0);
     glRotatef(35,0,0,1);
     glScalef(2, 1, 0);
   gluSphere(obiekt,0.2,20,10);
 glPopMatrix();
}

void zoltakula()
{
    GLUquadricObj *obiekt;
    obiekt = gluNewQuadric();

      glPushMatrix();
      glBindTexture(GL_TEXTURE_2D, tex[3]);
    glTranslatef(-3, 2, 0);
  //  glColor3f(1,1,0);
    gluSphere(obiekt,0.1,20,10);  //nasza zolta kula
    glPopMatrix();
}

void trawa()
{
    glPushMatrix();
    glBindTexture(GL_TEXTURE_2D, tex[0]);
    glTranslatef(0, -1.5, 0);
  glRotatef(90,1,0,0);
    glBegin(GL_QUADS);  //plansza
   // glColor3f(0,1,0);
      glTexCoord2f(0, 0);glVertex3f( 5,  -5, 0.0f); //prawy g wierzcholek //prawy dol
  //    glColor3f(0,0,0);
     glTexCoord2f(1, 0); glVertex3f( -5,  -5, 0.0f);//prawy d //prawa gora
   //   glColor3f(0,1,0);
      glTexCoord2f(1, 1);glVertex3f(-5, 5, 0.0f); //lewy d   //lewa gora
   //   glColor3f(0,1,0);
     glTexCoord2f(0, 1); glVertex3f( 5, 5.0,0.0f);  //lewy g   //lewy dol
glEnd();
    glPopMatrix();
}

/* obliczenie wspó³rzêdnych wierzcho³ków
   Beziera na podstawie wierzcho³ków
   B-spline (algorytm Boehma) */
void Boehm() {
    short i;
     for (i=0; i<=2; i++) {
                glVertex3f (B[i][0], B[i][1], B[i][2]);
                glVertex3f (C[i][0], C[i][1], C[i][2]);
                 glVertex3f (D[i][0], D[i][1], D[i][2]);
                 glVertex3f (E[i][0], E[i][1], E[i][2]);
                 glVertex3f (F[i][0], F[i][1], F[i][2]);
                 glVertex3f (G[i][0], G[i][1], G[i][2]);
     }
}

/* rysowanie pierwszej krzywej Beziera */
void Krzywa1() {
   glMap1f (GL_MAP1_VERTEX_3,0.0f, 1.0f, 3, 3, &B[0][0]);
   // w³¹czenie funkcji obliczaj¹cej
   glEnable (GL_MAP1_VERTEX_3);
   // obliczenie siatki 15 punktów
   // w zakresie parametru u <0; 1>
   glMapGrid1f (15, 0.0f, 1.0f);
   // ustawienie koloru linii (czerwony)
//   glColor3f (1.0f, 0.0f, 0.0f);
glBindTexture(GL_TEXTURE_2D, tex[4]);
   // ustawienie gruboœci linii (3 piksele)
   glLineWidth (3.0f);
   // rysowanie pierwszej krzywej Beziera
   // po³¹czenie ³aman¹ punktów 0-15
   glEvalMesh1 (GL_LINE, 0, 15);
  /*
  glPointSize(2);
   //glBegin(GL_LINE_STRIP);
    glBegin(GL_POINTS);
 for(i=0;i<100;i++)
 {glEvalCoord1f((float)i/100.0);
 }
glEnd();
*/
}

void Krzywa2() {
   glMap1f (GL_MAP1_VERTEX_3,0.0f, 1.0f, 3, 3, &C[0][0]);
   // w³¹czenie funkcji obliczaj¹cej
   glEnable (GL_MAP1_VERTEX_3);
   // obliczenie siatki 15 punktów
   // w zakresie parametru u <0; 1>
   glMapGrid1f (15, 0.0f, 1.0f);
   // ustawienie koloru linii (czerwony)
//   glColor3f (1.0f, 0.0f, 0.0f);
glBindTexture(GL_TEXTURE_2D, tex[4]);
   // ustawienie gruboœci linii (3 piksele)
   // rysowanie pierwszej krzywej Beziera
   // po³¹czenie ³aman¹ punktów 0-15
   glEvalMesh1 (GL_LINE, 0, 15);
    /*
   //glBegin(GL_LINE_STRIP);
    glBegin(GL_POINTS);
 for(i=0;i<100;i++)
 {glEvalCoord1f((float)i/100.0);
 }
glEnd();
*/
}

void Krzywa3() {

   glMap1f (GL_MAP1_VERTEX_3,0.0f, 1.0f, 3, 3, &D[0][0]);
   // w³¹czenie funkcji obliczaj¹cej
   glEnable (GL_MAP1_VERTEX_3);
   // obliczenie siatki 15 punktów
   // w zakresie parametru u <0; 1>
   glMapGrid1f (15, 0.0f, 1.0f);
   // ustawienie koloru linii (czerwony)
//   glColor3f (1.0f, 0.0f, 0.0f);
glBindTexture(GL_TEXTURE_2D, tex[4]);
   // ustawienie gruboœci linii (3 piksele)
   // rysowanie pierwszej krzywej Beziera
   // po³¹czenie ³aman¹ punktów 0-15
   glEvalMesh1 (GL_LINE, 0, 15);
  /*
   //glBegin(GL_LINE_STRIP);
    glBegin(GL_POINTS);
 for(i=0;i<100;i++)
 {glEvalCoord1f((float)i/100.0);
 }
glEnd();
*/
}

void Krzywa4() {

   glMap1f (GL_MAP1_VERTEX_3,0.0f, 1.0f, 3, 3, &E[0][0]);
   // w³¹czenie funkcji obliczaj¹cej
   glEnable (GL_MAP1_VERTEX_3);
   // obliczenie siatki 15 punktów
   // w zakresie parametru u <0; 1>
   glMapGrid1f (15, 0.0f, 1.0f);
   // ustawienie koloru linii (czerwony)
//   glColor3f (1.0f, 0.0f, 0.0f);
glBindTexture(GL_TEXTURE_2D, tex[4]);
   // ustawienie gruboœci linii (3 piksele)
   // rysowanie pierwszej krzywej Beziera
   // po³¹czenie ³aman¹ punktów 0-15
   glEvalMesh1 (GL_LINE, 0, 15);
  /*
   //glBegin(GL_LINE_STRIP);
    glBegin(GL_POINTS);
 for(i=0;i<100;i++)
 {glEvalCoord1f((float)i/100.0);
 }
glEnd();
*/
}

void Krzywa5() {

   glMap1f (GL_MAP1_VERTEX_3,0.0f, 1.0f, 3, 3, &F[0][0]);
   // w³¹czenie funkcji obliczaj¹cej
   glEnable (GL_MAP1_VERTEX_3);
   // obliczenie siatki 15 punktów
   // w zakresie parametru u <0; 1>
   glMapGrid1f (15, 0.0f, 1.0f);
   // ustawienie koloru linii (czerwony)
//   glColor3f (1.0f, 0.0f, 0.0f);
glBindTexture(GL_TEXTURE_2D, tex[4]);
   // ustawienie gruboœci linii (3 piksele)
   // rysowanie pierwszej krzywej Beziera
   // po³¹czenie ³aman¹ punktów 0-15
   glEvalMesh1 (GL_LINE, 0, 15);
  /*
   //glBegin(GL_LINE_STRIP);
    glBegin(GL_POINTS);
 for(i=0;i<100;i++)
 {glEvalCoord1f((float)i/100.0);
 }
glEnd();
*/
}

void Krzywa6() {

   glMap1f (GL_MAP1_VERTEX_3,0.0f, 1.0f, 3, 3, &G[0][0]);
   // w³¹czenie funkcji obliczaj¹cej
   glEnable (GL_MAP1_VERTEX_3);
   // obliczenie siatki 15 punktów
   // w zakresie parametru u <0; 1>
   glMapGrid1f (15, 0.0f, 1.0f);
   // ustawienie koloru linii (czerwony)
//   glColor3f (1.0f, 0.0f, 0.0f);
glBindTexture(GL_TEXTURE_2D, tex[4]);
   // ustawienie gruboœci linii (3 piksele)
   // rysowanie pierwszej krzywej Beziera
   // po³¹czenie ³aman¹ punktów 0-15
   glEvalMesh1 (GL_LINE, 0, 15);
     /*
   //glBegin(GL_LINE_STRIP);
    glBegin(GL_POINTS);
 for(i=0;i<100;i++)
 {glEvalCoord1f((float)i/100.0);
 }
glEnd();
*/
}

void Punkty(){
    glPushMatrix();
glBindTexture(GL_TEXTURE_2D, tex[3]);
   // ustawienie wielkoœci punktów (5 pikseli)
   glPointSize (5.0f);
   glBegin (GL_POINTS);

      // wierzcho³ki pierwszej krzywej
   //   glColor3f (1.0f, 0.0f, 0.0f);
      for (int i=0; i<3; i++) {
            glVertex3fv (B[i]);
      glVertex3fv (C[i]);
      glVertex3fv (D[i]);
      glVertex3fv (E[i]);
      glVertex3fv (F[i]);
      glVertex3fv (G[i]);
      }
   glEnd();
   glPopMatrix();

   }

void siatkasprawdzajaca()
{
    int d=-1;
         glPushMatrix();
         glBindTexture(GL_TEXTURE_2D, tex[5]);
 glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0;i<=10;i++){
        glVertex3f(-5+i,d,-5);
        glVertex3f(-5+i,d,-4);
        glVertex3f(-5+i,d,-3);
        glVertex3f(-5+i,d,-2);
        glVertex3f(-5+i,d,-1);
        glVertex3f(-5+i,d,0);
         glVertex3f(-5+i,d,1);
        glVertex3f(-5+i,d,2);
        glVertex3f(-5+i,d,3);
        glVertex3f(-5+i,d,4);
        glVertex3f(-5+i,d,5);
        }
    glEnd();
    d=0;
   // glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0;i<=10;i++){
        glVertex3f(-5+i,d,-5);
        glVertex3f(-5+i,d,-4);
        glVertex3f(-5+i,d,-3);
        glVertex3f(-5+i,d,-2);
        glVertex3f(-5+i,d,-1);
        glVertex3f(-5+i,d,0);
         glVertex3f(-5+i,d,1);
        glVertex3f(-5+i,d,2);
        glVertex3f(-5+i,d,3);
        glVertex3f(-5+i,d,4);
        glVertex3f(-5+i,d,5);
        }
    glEnd();
    d=1;
  //  glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0;i<=10;i++){
        glVertex3f(-5+i,d,-5);
        glVertex3f(-5+i,d,-4);
        glVertex3f(-5+i,d,-3);
        glVertex3f(-5+i,d,-2);
        glVertex3f(-5+i,d,-1);
        glVertex3f(-5+i,d,0);
         glVertex3f(-5+i,d,1);
        glVertex3f(-5+i,d,2);
        glVertex3f(-5+i,d,3);
        glVertex3f(-5+i,d,4);
        glVertex3f(-5+i,d,5);
        }
    glEnd();
    d=2;
   // glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0;i<=10;i++){
        glVertex3f(-5+i,d,-5);
        glVertex3f(-5+i,d,-4);
        glVertex3f(-5+i,d,-3);
        glVertex3f(-5+i,d,-2);
        glVertex3f(-5+i,d,-1);
        glVertex3f(-5+i,d,0);
         glVertex3f(-5+i,d,1);
        glVertex3f(-5+i,d,2);
        glVertex3f(-5+i,d,3);
        glVertex3f(-5+i,d,4);
        glVertex3f(-5+i,d,5);
        }
    glEnd();
     d=3;
  //  glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0;i<=10;i++){
        glVertex3f(-5+i,d,-5);
        glVertex3f(-5+i,d,-4);
        glVertex3f(-5+i,d,-3);
        glVertex3f(-5+i,d,-2);
        glVertex3f(-5+i,d,-1);
        glVertex3f(-5+i,d,0);
         glVertex3f(-5+i,d,1);
        glVertex3f(-5+i,d,2);
        glVertex3f(-5+i,d,3);
        glVertex3f(-5+i,d,4);
        glVertex3f(-5+i,d,5);
        }
    glEnd();
     d=4;
  //  glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0;i<=10;i++){
        glVertex3f(-5+i,d,-5);
        glVertex3f(-5+i,d,-4);
        glVertex3f(-5+i,d,-3);
        glVertex3f(-5+i,d,-2);
        glVertex3f(-5+i,d,-1);
        glVertex3f(-5+i,d,0);
         glVertex3f(-5+i,d,1);
        glVertex3f(-5+i,d,2);
        glVertex3f(-5+i,d,3);
        glVertex3f(-5+i,d,4);
        glVertex3f(-5+i,d,5);
        }
    glEnd();
     d=5;
  //  glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0;i<=10;i++){
        glVertex3f(-5+i,d,-5);
        glVertex3f(-5+i,d,-4);
        glVertex3f(-5+i,d,-3);
        glVertex3f(-5+i,d,-2);
        glVertex3f(-5+i,d,-1);
        glVertex3f(-5+i,d,0);
         glVertex3f(-5+i,d,1);
        glVertex3f(-5+i,d,2);
        glVertex3f(-5+i,d,3);
        glVertex3f(-5+i,d,4);
        glVertex3f(-5+i,d,5);
        }
    glEnd();
glPopMatrix();
}

void tor()
{

 glPushMatrix();
 glPointSize(2);
glBindTexture(GL_TEXTURE_2D, tex[4]);
glBegin(GL_LINE_STRIP);
 for(int i=0;i<50;i++)
 {
      glVertex3f(0+i/10,0,0);
 }
 glEnd();


 glPopMatrix();


  /*
  glPointSize(2);
   //glBegin(GL_LINE_STRIP);
    glBegin(GL_POINTS);
 for(i=0;i<100;i++)
 {glEvalCoord1f((float)i/100.0);
 }
glEnd();
*/
}

void DisplayLists()
{
    glEnable(GL_TEXTURE_2D);
    texturing();
    // okreœlenie zarodka dla  ci¹gu liczb pseudolosowych
    srand( time( NULL ) );
    // wygenerowanie identyfikatorów trzech list wyœwietlania
    listid = glGenLists( 7 );

    glNewList( listid + 0, GL_COMPILE );
    mucha();
    glEndList();

    glNewList( listid + 1, GL_COMPILE );
    skrzydlap();
    glEndList();

    glNewList( listid + 2, GL_COMPILE );
    skrzydlat();
    glEndList();

    glNewList( listid + 3, GL_COMPILE );
    zoltakula();
    glEndList();

    glNewList( listid + 4, GL_COMPILE );
    trawa();
    glEndList();

    glNewList( listid + 5, GL_COMPILE );
    siatkasprawdzajaca();
    glEndList();

    glNewList( listid + 6, GL_COMPILE );
    tor();
    glEndList();
}

void warunkimgly()
{
     if (mgla==1){
        glClearColor(0.25, 0.25, 0.25, 1.0);
      glEnable (GL_FOG);
            glFogi (GL_FOG_MODE, GL_EXP);
              glFogf (GL_FOG_START, -20.0f);
              glFogf (GL_FOG_END, 80.0f);
              glFogf (GL_FOG_DENSITY, d);
              glFogfv (GL_FOG_COLOR, kolor_mgly);
  }

  if (mgla==2){
        glClearColor(0.25, 0.25, 0.25, 1.0);
      glEnable (GL_FOG);
            glFogi (GL_FOG_MODE, GL_EXP2);
              glFogf (GL_FOG_START, -20.0f);
              glFogf (GL_FOG_END, 80.0f);
              glFogf (GL_FOG_DENSITY, d);
              glFogfv (GL_FOG_COLOR, kolor_mgly);
              }

               if (mgla==3){
                    glClearColor(0.25, 0.25, 0.25, 1.0);
      glEnable (GL_FOG);
            glFogi (GL_FOG_MODE, GL_LINEAR);
              glFogf (GL_FOG_START, -20.0f);
              glFogf (GL_FOG_END, 80.0f);
              glFogf (GL_FOG_DENSITY, d);
              glFogfv (GL_FOG_COLOR, kolor_mgly);
              }
}

void listyikrzywe()
{
   // glRotatef(90,0,1,0);
    glPushMatrix();
    // lot muchy

    glPushMatrix();
  //  glTranslatef(-4,0,0);
  glRotatef(+50,0,1,0);
  glRotatef(-7,0,1,0);
      glRotatef(xRotated,0,1,0);
      glTranslatef(-4,0,0);
      glRotatef(-50,0,1,0);
      glCallList( listid + 0 ); //mucha

      glPushMatrix();
      if(zskrz==15)zskrz=-15;
      glRotatef(zskrz,1,0,0);
      glCallList( listid + 1 ); //skrzydlap
      glPopMatrix();

      glPushMatrix();
      if(zskrz==15)zskrz=-15;
      glRotatef(zskrz,-1,0,0);
      glCallList( listid + 2 ); //skrzydlat
      glPopMatrix();

       glPopMatrix();

       glCallList( listid + 3 ); //zoltakula
      glCallList( listid + 4 ); //trawa

          if (punkts==true) Punkty();
       if (siatka==true) glCallList( listid + 5 ); //siatka

   if (k1==true) Krzywa1();
   if (k2==true) Krzywa2();
   if (k3==true) Krzywa3();
   if (k4==true) Krzywa4();
   if (k5==true) Krzywa5();
   if (k6==true) Krzywa6();


if(motionblur==true){
    glAccum(GL_MULT, 0.7);
    glAccum(GL_ACCUM, 0.3);
    glAccum(GL_RETURN, 1.0);
    }
  //    glCallList( listid + 6 ); //tor
  //to juz nie bedzie blurowac

   glPopMatrix();
}

void display() {

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   if(kolo==1)  glClearColor(0.5, 0.5, 1, 1.0); //niebieski
   if(kolo==0)  glClearColor(0, 0, 0, 1.0); //czarny
   if(enablemgla==true) glClearColor(0.25, 0.25, 0.25, 1.0);
  //  glColorMaterial (GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);

glPushMatrix();
    glEnable (GL_DEPTH_TEST);
    glMatrixMode (GL_MODELVIEW);
  //  glRotatef(zRotated,0.0,0.0,1.0);
    gluLookAt(cameraPos[0], cameraPos[1], cameraPos[2], 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    if(EnableLight==true) initLight();
    if(EnableLight==false) rozwalswiatlo();
    glTranslatef(0, -5, 0);
   glScalef(3, 3, 3);
    glRotatef(zRotated,0,1,0);

  if (anti_efekt==false){
      //   Figury();
    warunkimgly();
    listyikrzywe();
  }

   if (anti_efekt==true){
      // przesuniêcie w lewo
      glTranslatef (-k, 0.0f, 0.0f);
      //   Figury();
      warunkimgly();
    listyikrzywe();
         glAccum (GL_LOAD, 0.1f);

      // przesuniêcie w prawo
      glTranslatef (2*k, 0.0f, 0.0f);
      //   Figury();
      warunkimgly();
    listyikrzywe();
         glAccum (GL_ACCUM, 0.2f);

      // przesuniêcie w górê
      glTranslatef (-k, k, 0.0f);
      //   Figury();
      warunkimgly();
    listyikrzywe();
         glAccum (GL_ACCUM, 0.3f);

      // przesuniêcie w dó³
      glTranslatef (0.0f, -2*k, 0.0f);
     //    Figury();
      warunkimgly();
listyikrzywe();
         glAccum (GL_ACCUM, 0.4f);
      // wyœwietlenie zawartoœci bufora
      glAccum (GL_RETURN, 1.0f);
   }
glPopMatrix();
    glFlush();
    glutSwapBuffers();
 glutPostRedisplay();
}

void reshape(int w, int h) {
    glViewport(0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluPerspective(45.0, (GLfloat)w / (GLfloat)h, 1.5, 50.0);

    glMatrixMode(GL_MODELVIEW);
    display();
}

void keyboard(unsigned char key, int x, int y){
    switch(key){
        case 27 :
        case 'q':
            exit(0);
            break;
   reshape (glutGet (GLUT_WINDOW_WIDTH),glutGet (GLUT_WINDOW_HEIGHT));
    }
}

void idle()
{
    zRotated += 1;
    xRotated += 1;
    zskrz+=5;
}

void idlem()
{
    zanx+=0;
  zany+=0;
  zanz+=0;
    zRotated+=0;
    xRotated+=0;
    zskrz+=0;
}

void reset()
{
    // zmiana k1ta obrotu wzgledem osi X i Y
   zRotated = 0.0;
   zskrz=0;
   zanx=0;
   zany=0;
   zanz=0;
   xRotated = 0.0;

}

void animacjskrz()
{
    xRotated += 1;
    zanx+=1;
   zany+=0;
   zanz+=0.1;
   // zanx+=0.1;
    zskrz+=5;
}

void informacjelosujace()
{
    system("cls");
    printf("Informacje o wylosowanych wierzcholkach\n");
         printf("Pierwsza krzywa\n");
         for(int i=0;i<3;i++){
		 printf("1w: %g, ",B[0][i]);
		 printf("2w: %g, ",B[1][i]);
		 printf("3w: %g ",B[2][i]);}
		 printf("\n");
		 printf("Druga krzywa\n");
		  for(int i=0;i<3;i++){
		 printf("1w: %g, ",C[0][i]);
		 printf("2w: %g, ",C[1][i]);
		 printf("3w: %g ",C[2][i]);}
		 printf("\n");
		 printf("Trzecia krzywa\n");
		  for(int i=0;i<3;i++){
		 printf("1w: %g, ",D[0][i]);
		 printf("2w: %g, ",D[1][i]);
		 printf("3w: %g ",D[2][i]);}
		 printf("\n");
		  printf("Czwarta krzywa\n");
		  for(int i=0;i<3;i++){
		 printf("1w: %g, ",E[0][i]);
		 printf("2w: %g, ",E[1][i]);
		 printf("3w: %g ",E[2][i]);}
		 printf("\n");
		 printf("Piata krzywa\n");
		  for(int i=0;i<3;i++){
		 printf("1w: %g, ",F[0][i]);
		 printf("2w: %g, ",F[1][i]);
		 printf("3w: %g ",F[2][i]);}
		 printf("\n");
		 printf("Szosta krzywa\n");
		  for(int i=0;i<3;i++){
		 printf("1w: %g, ",G[0][i]);
		 printf("2w: %g, ",G[1][i]);
		 printf("3w: %g ",G[2][i]);}
		 printf("\n");
}

void menu(int value) {
    switch(value) {
        case 0:
            exit(0);
            break;
        case 1:
            glutIdleFunc(idle); //glutidlem dziala caly czas
            break;
        case 2:
            glutIdleFunc(idlem);
            break;
        case 3:
            glutIdleFunc(idlem);
           glutIdleFunc(reset);
            break;
        case 4:
           EnableLight = true;
            break;
        case 5:
            EnableLight = false;
            break;
        case 6:
            glEnable(GL_TEXTURE_2D);
            break;
        case 7:
            glDisable(GL_TEXTURE_2D);
            break;
        case 8:
            k1 = true;
            k2 = true;
            k3 = true;
            k4 = true;
            k5 = true;
            k6 = true;
            break;
        case 9:
            k1 = false;
            k2 = false;
            k3 = false;
            k4 = false;
            k5 = false;
            k6 = false;
            break;
        case 10:
            kolo=1;
            break;
        case 11:
            kolo=0;
            break;
        case 12:
            //srodkowe wygiecie
            B[0][0]=0;
            B[0][1]=0;
            B[0][2]=0;

            B[1][0]=((rand()%2)-1); //2,1
            B[1][1]=((rand()%2)-1); //2,2
            B[1][2]=((rand()%2)-1); //2,3
            //ostatni
            B[2][0]=((rand()%10)-5); //3,1
            B[2][1]=(rand()%2); //3,2
            B[2][2]=((rand()%10)-5); //3,3
            if (B[1][0]==0) B[1][0]=1;
            if (B[1][1]==0) B[1][1]=1;
            if (B[1][2]==0) B[1][2]=1;

            C[0][0]=B[2][0];
            C[0][1]=B[2][1];
            C[0][2]=B[2][2];
            //
            C[1][0]=((rand()%2)-1); //2,1
            C[1][1]=((rand()%2)-1); //2,2
            C[1][2]=((rand()%2)-1); //2,3
            //ostatni
            if (C[1][0]==0) C[1][0]=1;
            if (C[1][1]==0) C[1][1]=1;
            if (C[1][2]==0) C[1][2]=1;

            C[2][0]=((rand()%6)-3); //3,1
            C[2][1]=(rand()%6); //3,2
            C[2][2]=((rand()%6)-3); //3,3

            D[0][0]=C[2][0];
            D[0][1]=C[2][1];
            D[0][2]=C[2][2];

            D[1][0]=((rand()%10)-5); //2,1
            D[1][1]=((rand()%4)-2); //2,2
            D[1][2]=((rand()%10)-5); //2,3
            //ostatni
            if (D[1][0]==0) D[1][0]=1;
            if (D[1][1]==0) D[1][1]=1;
            if (D[1][2]==0) D[1][2]=1;

            D[2][0]=((rand()%4)-2); //3,1
            D[2][1]=(rand()%2); //3,2
            D[2][2]=((rand()%4)-2); //3,3

            E[0][0]=D[2][0];
            E[0][1]=D[2][1];
            E[0][2]=D[2][2];

            E[1][0]=((rand()%10)-5); //2,1
            E[1][1]=((rand()%4)-2); //2,2
            E[1][2]=((rand()%10)-5); //2,3
            //ostatni
            if (E[1][0]==0) E[1][0]=1;
            if (E[1][1]==0) E[1][1]=1;
            if (E[1][2]==0) E[1][2]=1;

            E[2][0]=((rand()%4)-2); //3,1
            E[2][1]=(rand()%2); //3,2
            E[2][2]=((rand()%4)-2); //3,3

            F[0][0]=E[2][0];
            F[0][1]=E[2][1];
            F[0][2]=E[2][2];

            F[1][0]=((rand()%2)-1); //2,1
            F[1][1]=((rand()%2)-1); //2,2
            F[1][2]=((rand()%2)-1); //2,3
            //ostatni
            if (F[1][0]==0) F[1][0]=1;
            if (F[1][1]==0) F[1][1]=1;
            if (F[1][2]==0) F[1][2]=1;

            F[2][0]=((rand()%4)-2); //3,1
            F[2][1]=(rand()%2); //3,2
            F[2][2]=((rand()%4)-2); //3,3

            G[0][0]=F[2][0];
            G[0][1]=F[2][1];
            G[0][2]=F[2][2];

            G[1][0]=((rand()%2)-1); //2,1
            G[1][1]=((rand()%2)-1); //2,2
            G[1][2]=((rand()%2)-1); //2,3
            //ostatni
            if (G[1][0]==0) G[1][0]=1;
            if (G[1][1]==0) G[1][1]=1;
            if (G[1][2]==0) G[1][2]=1;

            G[2][0]=B[0][0];
            G[2][1]=B[0][1]; //3,2
            G[2][2]=B[0][2];//3,3

		informacjelosujace();
            break;
        case 13:
            anti_efekt=true;
            motionblur=false;
            break;
        case 14:
            anti_efekt=false;
            break;
        case 15:
            glEnable (GL_FOG);
            enablemgla=true;
            break;
        case 16:
            glDisable (GL_FOG);
           mgla=0;
           enablemgla=false;
            break;
        case 17:
            mgla=1;
            break;
        case 18:
            mgla=2;
            break;
        case 19:
           mgla=3;
            break;
        case 20:
            d=0.025;
            break;
        case 21:
            d=0.050;
            break;
        case 22:
           d=0.075;
            break;
        case 23:
           d=0.1;
            break;
        case 24:
          glutIdleFunc(animacjskrz);
            break;
        case 25:
           siatka = true;
            break;
        case 26:
             siatka = false;
            break;
        case 27:
             motionblur = true;
             anti_efekt=false;
            break;
        case 28:
             motionblur = false;
            break;
        case 29:
             punkts = true;
            break;
        case 30:
             punkts = false;
            break;
    }
    reshape (glutGet (GLUT_WINDOW_WIDTH),glutGet (GLUT_WINDOW_HEIGHT));
}

int main(int argc, char *argv[]) {
    srand(time(NULL));

    Boehm();

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(screenWidth, screenHeight);
    glutInitWindowPosition(5,5);
    glutCreateWindow(argv[0]);

    glMatrixMode(GL_PROJECTION);
     glMatrixMode(GL_MODELVIEW);
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutCreateMenu(menu);

    int menuAnim = glutCreateMenu(menu);
     glutAddMenuEntry("Wlacz obrot nieskonczony o os X", 1);
     glutAddMenuEntry("Zatrzymaj obrot i animacje skrzydel", 2);
     glutAddMenuEntry("Reset obrotu i powrot to pozycji startowej", 3);
      glutAddMenuEntry("Animacja skrzydel 1", 24);

    int menuSwi = glutCreateMenu(menu);
    glutAddMenuEntry("Wlacz Oswietlenie", 4);
    glutAddMenuEntry("Wylacz Oswietlenie", 5);

     int menuText = glutCreateMenu(menu);
    glutAddMenuEntry("Wlacz Teksturowanie", 6);
    glutAddMenuEntry("Wylacz Teksturowanie", 7);

    int menuKrzywa = glutCreateMenu(menu);
    glutAddMenuEntry("Wlacz wyswietlenie Krzywej", 8);
    glutAddMenuEntry("Wylacz wyswietlenie Krzywej", 9);
     glutAddMenuEntry("Losuj Krzywa", 12);

    int menuTlo = glutCreateMenu(menu);
    glutAddMenuEntry("Blekitne", 10);
    glutAddMenuEntry("Czarne", 11);

    int menuAnti = glutCreateMenu(menu);
    glutAddMenuEntry("Wlacz", 13);
    glutAddMenuEntry("Wylacz", 14);

    int menuMgl = glutCreateMenu(menu);
    glutAddMenuEntry("Wlacz", 15);
    glutAddMenuEntry("Wylacz", 16);
    glutAddMenuEntry("Mgla z narastaniem EXP",17);
    glutAddMenuEntry("Mgla z narastaniem EXP2",18);
    glutAddMenuEntry("Mgla z narastaniem liniowym",19);

    int menuMglges = glutCreateMenu(menu);
    glutAddMenuEntry("25%",20);
    glutAddMenuEntry("50%",21);
    glutAddMenuEntry("75%",22);
    glutAddMenuEntry("100%",23);

    int menuSiatka = glutCreateMenu(menu);
     glutAddMenuEntry("Wlacz siatke",25);
    glutAddMenuEntry("Wylacz siatke",26);
    glutAddMenuEntry("Wlacz punkty",29);
    glutAddMenuEntry("Wylacz punkty",30);

    int menumotionblur = glutCreateMenu(menu);
     glutAddMenuEntry("Wlacz motion blur",27);
    glutAddMenuEntry("Wylacz motion blur",28);

    glutCreateMenu(menu);
    glutAddSubMenu("Animacje", menuAnim);
    glutAddSubMenu("Rozmycie w ruchu", menumotionblur);
    glutAddSubMenu("Swiatlo", menuSwi);
    glutAddSubMenu("Tekstury", menuText);
    glutAddSubMenu("Siatka pomocnicza i punkty", menuSiatka);
    glutAddSubMenu("Krzywa", menuKrzywa);
    glutAddSubMenu("Tlo", menuTlo);
    glutAddSubMenu("Wygladzanie krawedzi", menuAnti);
    glutAddSubMenu("Mgla", menuMgl);
    glutAddSubMenu("Gestosc Mgly(EXP1/2)", menuMglges);
    glutAddMenuEntry("Opusc", 0);

    glutAttachMenu (GLUT_RIGHT_BUTTON);
    xRotated = yRotated = zRotated = 0.0;

    DisplayLists();

    glutMainLoop();

    return 0;
}
